# -*- coding: utf-8 -*-
"""movimiento circular uniformemente acelerado

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bmpfGnvPNohbunHxLm0PV_4Uoa2R4rVA
"""



"""# FISICA MOVIMIENTO CIRCULAR UNIFORMEMENTE ACERLERADO EN PYTHON
Kenia Hernandez

Octubre 2023
"""

import numpy as np
import matplotlib.pyplot as plt

# variables iniciales

# aceleraciones rads/s^2
alfa = -2

# radio m
R = 3

T0 = 0           #tiempo inicial
Tf = 100            # tiempo final (s)
dT = 0.001          # paso de tiempo
nT = int((Tf-T0)/dT +1)

# vecctor de tiempo
t= np.linspace(T0,Tf,nT)
print(t)

# vector de distancia angular recorrida

r = np.zeros(len(t))
r[0] = 0

# vector de velocidad angular

# velocidad angular inicial rads/s
rpm0 = 100

w0 = rpm0 * 2 * np.pi /60

w = np.zeros(len(t))
w[0] = w0

for i, ti in enumerate(t[0:-1]):

  w[i+1] = w[i]* alfa*dT
  r[i+1] = r[i]*dT + (alfa*dT*dT/2)

print(np.column_stack((t,r,w)))

plt.plot(t[5000:5000],w[5000:5000],'o-',markersize=2)
plt.grid()
plt.xlabel('Tiempo')
plt.ylabel('Velocidd angular')
plt.title("Velocidad angular vs tiempo")

plt.plot(t[1:1500],r[1:1500],'o-',markersize=2)
plt.grid()
plt.xlabel('Tiempo')
plt.ylabel('Radianes')
plt.title("Posicion angular vs Tiempo")

x = R* np.cos()
y = R*np.sin(r)
plt.lot()